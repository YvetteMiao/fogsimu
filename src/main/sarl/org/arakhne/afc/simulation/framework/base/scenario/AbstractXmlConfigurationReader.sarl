/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.scenario

import io.sarl.lang.core.Agent
import java.io.File
import java.util.UUID
import org.arakhne.afc.simulation.framework.base.config.AbstractConfiguration
import org.arakhne.afc.simulation.framework.base.config.SpawnerConfig
import org.arakhne.afc.simulation.framework.base.environment.AgentBody
import org.w3c.dom.Document
import org.w3c.dom.Element

import static extension org.arakhne.afc.inputoutput.xml.XMLUtil.*

/** 
 * Reader of xml file that contains a configuration definition.
 *
 * @param <T> the type of the configuration to read.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractXmlConfigurationReader<T extends AbstractConfiguration> {

	/** Definition of a configuration instance.
	 * @return the instance.
	 */
	abstract def createConfigurationInstance : T

	/** Definition of a spawners' configuration instance.
	 * @return the instance.
	 */
	def createSpawnerConfig : SpawnerConfig {
		new SpawnerConfig
	}
	
	/** Read a simulation configuration
	 *
	 * @param file the file to read.
	 * @return the configuration.
	 */
	final def loadXmlConfiguration(file : File) : T {
		var xml = file.readXML
		var config = createConfigurationInstance
		loadXmlConfiguration(file, xml, config)
		return config
	}

	/** Read a simulation configuration
	 * 
	 * @param file the file to read.
	 * @return the configuration.
	 */
	protected def loadXmlConfiguration(file : File, xml : Document, config : T) : void {
		config.scenarioName = xml.getAttributeValueWithDefault(null, "scenario", "name")
		
		val tc = config.timeConfig
		xml.getAttributeDoubleWithDefault(null, "scenario", "time", "start") => [
			if(it !== null) tc.start = it
		]
		xml.getAttributeDoubleWithDefault(null, "scenario", "time", "step") => [
			if(it !== null) tc.step = it
		]
		xml.getAttributeDoubleWithDefault(null, "scenario", "time", "stop") => [
			if(it !== null) tc.stop = it
		]
		xml.getAttributeLongWithDefault(null, "scenario", "time", "delay") => [
			if(it !== null) tc.simulationDelay = it
		]
				
		for (child : xml.getElementsFromPath("scenario", "spawners", "spawner")) {
			var spawner = createSpawnerConfig
			spawner.ID = child.getAttributeUUID("id")
			spawner.x = child.getAttributeDoubleWithDefault(0.0, "x")
			spawner.y = child.getAttributeDoubleWithDefault(0.0, "y")
			spawner.agentType = child.getAttributeClassWithDefault(null, "agent") as Class<? extends Agent>
			spawner.bodyType = child.getAttributeClassWithDefault(null, "body") as Class<? extends AgentBody>
			spawner.budget = child.getAttributeIntWithDefault(Integer::MAX_VALUE, "budget")
			var lawNode = child.getElementFromPath("law")
			if (lawNode !== null) {
				var law = lawNode.getAttributeValue("name")
				if (!law.isNullOrEmpty) {
					spawner.law = law
					var nodeList = lawNode.childNodes
					for (var i = 0; i < nodeList.length; i++) {
						var argNode = nodeList.item(i)
						if (argNode instanceof Element) {
							var name = argNode.nodeName
							if (!name.nullOrEmpty) {
								var value = argNode.getText?.trim
								if (!value.nullOrEmpty) {
									spawner.lawArguments.put(name, value)
								}
							}
						}
					}
					config.spawners += spawner
				}
			}
		}
	}

	protected static def getAttributeUUID(element : Element, name : String) : UUID {
		val v = element.getAttributeValueWithDefault(null, name)
		if (v !== null && !v.isEmpty()) {
			try {
				val id = UUID::fromString(v)
				if (id !== null) {
					return id
				}
			} catch (e : Exception) {
				//
			}
			try {
				val id = UUID::nameUUIDFromBytes(v.bytes)
				if (id !== null) {
					return id
				}
			} catch (e : Exception) {
				//
			}
		}
		return UUID::randomUUID
	}

}
