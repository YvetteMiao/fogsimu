/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.fx

import java.util.Collection
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.gis.road.ui.drawers.RoadPolylineDrawer
import org.arakhne.afc.nodefx.LevelOfDetails
import org.arakhne.afc.nodefx.ZoomableGraphicsContext
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileRoadObject
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import javafx.scene.paint.Color

/** Drawer of the roads and the traffic.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class TrafficRoadPolylineDrawer extends RoadPolylineDrawer {

	override draw(gc : ZoomableGraphicsContext, element : RoadPolyline) {
		if (gc.levelOfDetails !== LevelOfDetails::LOW
			&& gc.getState() === TrafficRoadNetworkDrawer::DRAWING_STATE_VEHICLES) {
			/*var vehicles = element.getUserDataCollection(
				EnvironmentModel1d::MOBILE_OBJECTS_ATTRIBUTE_NAME) as Collection<MobileRoadObject>
			val position2d = new Point2d
			val tangent2d = new Vector2d
			gc.fill = Color::DARKGRAY
			gc.stroke = Color::BLACK
			for (vehicle : vehicles) {
				gc.save
				var position = vehicle.roadPosition
				element.projectsOnPlane(
					position.curvilineCoordinate,
					position.lateralDistance,
					position2d,
					tangent2d)
				gc.translate(position2d.x, position2d.y)
				gc.rotate(tangent2d.orientationAngle)
				gc.translate(-position2d.x, -position2d.y)
				var width = 0.0
				var height = 0.0
				var x = -width / 2
				var y = -height / 2
				gc.beginPath
				gc.rect(x, y, width, height)
				gc.fill()
				gc.stroke()
				gc.restore
			}*/
		} else {
			super.draw(gc, element)
		}
	}

}
