/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.config

import org.arakhne.afc.vmutil.json.JsonBuffer
import org.arakhne.afc.vmutil.json.JsonableObject

/**
 * Configuration.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class TimeConfig implements JsonableObject {

	var start = 0.0

	var step = 0.5

	var stop : Double

	var delay = 0l

	/** The starting time in seconds. */
	def getStart : double {
		this.start
	}

	/** The starting time in seconds.
	 */
	def setStart(t : double) {
		if (t < 0.0) {
			this.start = 0.0
		} else {
			this.start = t
		}
	}

	/** The step duration in seconds.
	 */
	def getStep : double {
		this.step
	}

	/** The step duration in seconds.
	 */
	def setStep(d : double) {
		if (d <= 0.0) {
			this.step = 0
		} else {
			this.step = d
		}
	}

	def getSimulationDelay : long {
		this.delay
	}

	def setSimulationDelay(d : long) {
		if (d <= 0) {
			this.delay = 0
		} else {
			this.delay = d
		}
	}

	/** The stop time in seconds.
	 */
	def getStop : Double {
		this.stop
	}

	/** The stop time in seconds.
	 */
	def setStop(d : Double) {
		if (d === null) {
			this.stop = null
		} else {
			this.stop = d.doubleValue
		}
	}

	def toJson(buffer : JsonBuffer) : void {
		buffer.add("start", getStart)
		buffer.add("step", getStep)
		var e = getStop
		if (e !== null) {
			buffer.add("stop", e)
		}
		buffer.add("simulationDelay", getSimulationDelay)
	}

	override toString : String {
		var buffer = new JsonBuffer
		toJson(buffer)
		return buffer as String
	}

}
