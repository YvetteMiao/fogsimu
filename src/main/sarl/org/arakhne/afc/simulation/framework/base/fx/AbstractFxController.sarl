/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.fx

import io.sarl.bootstrap.SRE
import io.sarl.javafx.FxViewerController
import java.io.File
import java.net.URL
import java.text.MessageFormat
import java.util.ResourceBundle
import java.util.UUID
import java.util.prefs.Preferences
import javafx.application.Platform
import javafx.beans.property.SimpleObjectProperty
import javafx.concurrent.Task
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.scene.Cursor
import javafx.scene.Node
import javafx.scene.layout.BorderPane
import javafx.stage.FileChooser
import javafx.stage.Stage
import org.arakhne.afc.inputoutput.filefilter.XMLFileFilter
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenario
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenarioFactory
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentAgent1d
import org.arakhne.afc.vmutil.FileSystem
import io.sarl.lang.core.EventSpace
import io.sarl.util.OpenEventSpaceSpecification
import org.arakhne.afc.simulation.framework.base.events.StartSimulation
import org.arakhne.afc.simulation.framework.base.events.StopSimulation

/** JavaFX controller.
 * 
 * @param <EM> the type of the environment model.
 * @param <S> the type of the simulation scenario.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractFxController<S extends SimulationScenario<?, ?, ?>>
		extends FxViewerController implements Initializable {
	
	var bundle : ResourceBundle

	var scenario : S

	var lastKnownDirectoryProperty = new SimpleObjectProperty<File>

	@FXML var viewerPane : BorderPane

	var ^space : EventSpace

	var environmentID : UUID

	
	protected def synchronizePreferencedFolder : void {
		var prefs = Preferences.userNodeForPackage(typeof(AbstractFxController))
		var filename = prefs.get("lastOpenedDirectory", null)
		var folder = if(filename.nullOrEmpty) null else FileSystem::convertStringToFile(filename)
		if (folder !== null) {
			this.lastKnownDirectoryProperty.value = folder
		}
	}

	protected def setPreferencedFolder(file : File) {
		this.lastKnownDirectoryProperty.value = file
		var prefs = Preferences.userNodeForPackage(typeof(AbstractFxController))
		if (file === null) {
			prefs.remove("lastOpenedDirectory")
		} else {
			prefs.put("lastOpenedDirectory", file.canonicalFile.absolutePath)
		}
		prefs.flush
	}

	protected final def getBundle : ResourceBundle {
		this.bundle
	}

	protected final def getViewerPane : BorderPane {
		this.viewerPane
	}
	
	override initialize(location : URL, resources : ResourceBundle) {
		this.bundle = resources
		synchronizePreferencedFolder
	}

	protected def selectScenarioFile : File {
		var fileChooser = new FileChooser
		fileChooser.title = this.bundle.getString("OPEN_WINDOW_TITLE")
		fileChooser.extensionFilters += new XMLFileFilter().toJavaFX
		fileChooser.initialDirectoryProperty.bindBidirectional(this.lastKnownDirectoryProperty)
		var file = fileChooser.showOpenDialog(this.viewerPane.scene.window)
		if (file !== null) {
			this.preferencedFolder = file.parentFile
		}
		return file
	}

	protected def alert(exception : Throwable) {
		DialogUtil::alert(exception, this.bundle)
	}

	protected def beforeScenarioSetup {
	}

	protected def afterScenarioInit {
	}

	protected def afterScenarioSetup(error : boolean) {
	}

	protected abstract def createViewerNode(scenario : S) : Node

	protected def startAgentPlatform(environmentType : Class<? extends EnvironmentAgent1d> = typeof(EnvironmentAgent1d)) {
		var sre = SRE::bootstrap
		sre.setRandomContextUUID
		var context = sre.startWithoutAgent
		val spaceID = UUID::randomUUID
		this.^space = context.createSpace(typeof(OpenEventSpaceSpecification), spaceID)
		this.environmentID = sre.startAgent(environmentType, this.scenario, spaceID)
	}
	
	protected def createSetupTask(scenarioFile : File, scenarioFactory : SimulationScenarioFactory<S>) : Task<Void> {
		new Task<Void> {
			protected def call : Void throws Exception {
				beforeScenarioSetup
				AbstractFxController.this.viewerPane.scene.cursor = Cursor::WAIT
				var error = true
				try {
					AbstractFxController.this.scenario = scenarioFactory.buildSimulationScenario(scenarioFile)

					val dataPane = AbstractFxController.this.scenario.createViewerNode

					error = false
					val nm = AbstractFxController.this.scenario.configuration.scenarioName

					startAgentPlatform

					Platform::runLater [
						try {
							(AbstractFxController.this.viewerPane.scene.
								window as Stage).title = if (nm.isNullOrEmpty) {
								AbstractFxController.this.bundle.getString("NO_TITLE")
							} else {
								MessageFormat::format(
									AbstractFxController.this.bundle.getString("TITLE"), nm)
							}
							AbstractFxController.this.viewerPane.center = dataPane
	
							afterScenarioInit
						} catch (exception : Throwable) {
							exception.alert
						}
					]
				} catch (exception : Throwable) {
					exception.alert
				} finally {
					AbstractFxController.this.viewerPane.scene.cursor = Cursor::DEFAULT
					afterScenarioSetup(error)
				}
				return null
				}
			}
	}

	@SuppressWarnings("discouraged_reference")
	protected def start(task : Task<?>) : void {
		var thread = new Thread(task)
		thread.daemon = true
		thread.start
	}

	/** Setup the simulator.
	 */
	@SuppressWarnings("discouraged_reference")
	@FXML
	protected def actionSetup {
		var fileChooser = new FileChooser
		fileChooser.title = this.bundle.getString("OPEN_WINDOW_TITLE")
		fileChooser.extensionFilters += new XMLFileFilter().toJavaFX
		fileChooser.initialDirectoryProperty.bindBidirectional(this.lastKnownDirectoryProperty)
		val file = fileChooser.showOpenDialog(this.viewerPane.scene.window)
		if (file !== null) {
			preferencedFolder = file.parentFile
		}
	}

	protected def beforeSimulationStart {
	}

	protected def afterSimulationStart(error : boolean) {
	}

	protected def startSimulation {
		var error = true
		try {
			beforeSimulationStart

			if (this.^space !== null && this.environmentID !== null) {
				try {
					this.viewerPane.scene.window.setOnCloseRequest [
						stopSimulation
					]
					this.^space.emit(this.environmentID, new StartSimulation)[it.UUID == this.environmentID]
					error = false
				} catch (exception : Throwable) {
					exception.alert
				}
			}
		} catch (exception : Throwable) {
			exception.alert
		} finally {
			afterSimulationStart(error)
		}
	}

	protected def beforeSimulationStop {
	}

	protected def afterSimulationStop {
	}

	protected def stopSimulation {
		try {
			this.viewerPane.scene.window.setOnCloseRequest(null)
			beforeSimulationStop
			this.^space.emit(this.environmentID, new StopSimulation)[it.UUID == this.environmentID]
		} catch (exception : Throwable) {
			exception.alert
		} finally {
			afterSimulationStop
		}
	}

}
