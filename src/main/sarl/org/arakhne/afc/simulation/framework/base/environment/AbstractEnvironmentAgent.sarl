/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.arakhne.afc.simulation.framework.base.environment

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.lang.core.Address
import io.sarl.util.OpenEventSpace
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import org.arakhne.afc.simulation.framework.base.config.AbstractConfiguration
import org.arakhne.afc.simulation.framework.base.events.Influence
import org.arakhne.afc.simulation.framework.base.events.Perception
import org.arakhne.afc.simulation.framework.base.events.SimulationAgentReady
import org.arakhne.afc.simulation.framework.base.events.StartSimulation
import org.arakhne.afc.simulation.framework.base.events.StopSimulation
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenario
import org.arakhne.afc.simulation.framework.base.time.TimeManager

/**
 * The agent that supports the agent environment.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract agent AbstractEnvironmentAgent {

	uses DefaultContextInteractions, Lifecycle, Behaviors

	var scenario : SimulationScenario<?, ?, ?>

	var environment : AbstractEnvironmentModel<?>

	var ^space : OpenEventSpace
	var myAdr : Address

	val influences = new AtomicInteger(0)

	val atLeastOneAgentSpawn = new AtomicBoolean

	val freeze = new AtomicBoolean(false)

	var time : TimeManager

	on Initialize {
		occurrence.overridableInitializer
		emit(new SimulationAgentReady)
	}

	def overridableInitializer(evt : Initialize) : void {
		this.scenario = (evt.parameters.get(0) as SimulationScenario<?, ?, ?>)
		var spaceId = (evt.parameters.get(1) as UUID)
		this.environment = this.scenario.agentEnvironment
		this.time = new TimeManager(this.scenario.configuration.timeConfig)
		this.^space = defaultContext.getSpace(spaceId)
		this.^space.register(asEventListener)
		this.myAdr = this.^space.getAddress(ID)
	}

	on Influence [!freeze.get] {
		var id = occurrence.influencedObject
		if (id === null) {
			id = occurrence.source.UUID
		}
		var body = this.environment.getAgentBodyFor(id)
		if (body !== null) {
			body.influence = occurrence
			var v = this.influences.incrementAndGet
			if (v >= this.environment.agentBodyCount) {
				runEnvironmentBehavior
			}
		}
	}

	on StopSimulation {
		killMe
	}

	on StartSimulation {
		runEnvironmentBehavior
	}

	def runEnvironmentBehavior {
		this.freeze.set(true)
		try {
			this.influences.set(0)
			this.environment.applyInfluences(this.time)
			this.time.doProgress

			var delay = this.scenario.configuration.timeConfig.simulationDelay
			if (delay > 0) {
				Thread::sleep(delay)
			}

			spawnAgents
			this.environment.computePerceptions
		} finally {
			this.freeze.set(false)
		}
		notifyAgentsOrDie
	}

	def spawnAgents {
		for (spawner : this.scenario.spawners) {
			var count = spawner.spawnableAt(this.time)
			if (count > 0) {
				var spawned = 0
				for (var i = 0; i < count; i++) {
					try {
						var body = spawner.createBody(this.environment)
						if (body !== null) {
							var agentId = spawner.agentType.spawnInContextWithID(
								body.UUID,
								defaultContext,
								this.^space.spaceID.ID,
								ID)
							if (agentId !== null) {
								this.atLeastOneAgentSpawn.set(true)
								spawned++;
							}
						}
					} catch (e : Throwable) {
						//
					}
				}
				spawner.spawned(spawned)
			}
		}
	}

	def notifyAgentsOrDie {
		var run = false
		for (body : this.environment.agentBodies.values) {
			run = true
			var ^event = getPerceptionFactory.newPerception(this.time,
				this.scenario.configuration,
				body)
			this.^space.emit(this.myAdr.UUID, ^event)[it.UUID == body.UUID]
		}
		if (!run) {
			if (this.atLeastOneAgentSpawn.get) {
				killMe
			} else {
				wake(new StartSimulation)
			}
		}
	}

	abstract def getPerceptionFactory : PerceptionFactory<T> with T extends AgentBody 

	/** 
	 * Factory of perception.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	interface PerceptionFactory<T extends AgentBody> {

		def newPerception(time : TimeManager, configuration : AbstractConfiguration,
			body : T) : Perception

	}

}
